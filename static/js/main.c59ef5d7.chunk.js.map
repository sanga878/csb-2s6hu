{"version":3,"sources":["components/ToDoItem.jsx","components/App.jsx","index.js"],"names":["ToDoItem","props","onClick","onChecked","id","text","App","useState","inputText","setInputText","items","setItems","deleteItem","prevItems","filter","item","index","className","onChange","event","newValue","target","value","type","map","todoItem","key","ReactDOM","render","document","getElementById"],"mappings":"0NAkCeA,MAhCf,SAAkBC,GAmBhB,OACE,yBACEC,QAAS,WACPD,EAAME,UAAUF,EAAMG,MAKxB,4BAAKH,EAAMI,QCiCFC,MA3Df,WACE,MAAkCC,mBAAS,IAA3C,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAA0BF,mBAAS,IAAnC,mBAAOG,EAAP,KAAcC,EAAd,KAcA,SAASC,EAAWR,GAClBO,GAAS,SAACE,GACR,OAAOA,EAAUC,QAEf,SAACC,EAAMC,GACL,OAAOA,IAAUZ,QAOzB,OACE,yBAAKa,UAAU,aACb,yBAAKA,UAAU,WACb,2CAEF,yBAAKA,UAAU,QACb,2BAAOC,SA9Bb,SAAsBC,GACpB,IAAMC,EAAWD,EAAME,OAAOC,MAC9Bb,EAAaW,IA4BsBG,KAAK,OAAOD,MAAOd,IAClD,4BAAQN,QA1Bd,WACES,GAAS,SAACE,GACR,MAAM,GAAN,mBAAWA,GAAX,CAAsBL,OAExBC,EAAa,MAuBP,uCAGJ,6BACE,4BAGGC,EAAMc,KAAI,SAACC,EAAUT,GAAX,OACT,kBAAC,EAAD,CACEU,IAAKV,EAELZ,GAAIY,EACJX,KAAMoB,EACNtB,UAAWS,WChDzBe,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,U","file":"static/js/main.c59ef5d7.chunk.js","sourcesContent":["import React, { useState } from \"react\";\n\nfunction ToDoItem(props) {\n  // const [isDone, setIsDone] = useState(false);\n\n  // function handleClick() {\n  //   // setIsDone((prevValue) => {\n  //   //   return !prevValue;\n  //   //Allows to be reversed simply between true and false\n  //   //   });\n  // }\n\n  //   return (\n  //     <div onClick={handleClick}>\n  //       <li style={{ textDecoration: isDone ? \"line-through\" : \"none\" }}>\n  //         {props.text}\n  //       </li>\n  //     </div>\n  //   );\n  // }\n\n  return (\n    <div\n      onClick={() => {\n        props.onChecked(props.id); //Parses the id of the clicked item back to the deleteItem function\n        //Adding this within a function makes sure that onChecked will be called only when the item is clicked.\n        //So in dev tools, the id wont be printed until you click on the item.\n      }}\n    >\n      <li>{props.text}</li>\n    </div>\n  );\n}\n\nexport default ToDoItem;\n","import React, { useState } from \"react\";\nimport ToDoItem from \"./ToDoItem\";\n\nfunction App() {\n  const [inputText, setInputText] = useState(\"\");\n  const [items, setItems] = useState([]);\n\n  function handleChange(event) {\n    const newValue = event.target.value;\n    setInputText(newValue);\n  }\n\n  function addItem() {\n    setItems((prevItems) => {\n      return [...prevItems, inputText];\n    });\n    setInputText(\"\");\n  }\n\n  function deleteItem(id) {\n    setItems((prevItems) => {\n      return prevItems.filter(\n        //Look through each item and get the index for each item.\n        (item, index) => {\n          return index !== id;\n          //return all the items where the index is not equal to the id being parsed over.\n        }\n      );\n    });\n  }\n\n  return (\n    <div className=\"container\">\n      <div className=\"heading\">\n        <h1>To-Do List</h1>\n      </div>\n      <div className=\"form\">\n        <input onChange={handleChange} type=\"text\" value={inputText} />\n        <button onClick={addItem}>\n          <span>Add</span>\n        </button>\n      </div>\n      <div>\n        <ul>\n          {/* Hover mouse over 'map' for syntax.    -index being the index of the item in the array. */}\n          {/* syntax: array.map((value[any], index[number], array [any[]])) */}\n          {items.map((todoItem, index) => (\n            <ToDoItem\n              key={index} //Always should have a key. This will be set to the index of the Items array.\n              // It's not recommneded to use the index as the key value.\n              id={index}\n              text={todoItem}\n              onChecked={deleteItem}\n            />\n            //Sending todoItem\" as a prop to \"ToDoItem in ToDoItem.jsx\".\n          ))}\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}